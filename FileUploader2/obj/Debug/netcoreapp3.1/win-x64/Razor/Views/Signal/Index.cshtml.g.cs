#pragma checksum "D:\Mywork\myecommercehelper\FileUploader2-master\FileUploader2-master\FileUploader2\Views\Signal\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "793b38bc383acbc34191cb5f583537af97a8a4bc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Signal_Index), @"mvc.1.0.view", @"/Views/Signal/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Mywork\myecommercehelper\FileUploader2-master\FileUploader2-master\FileUploader2\Views\_ViewImports.cshtml"
using FileUploader2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Mywork\myecommercehelper\FileUploader2-master\FileUploader2-master\FileUploader2\Views\_ViewImports.cshtml"
using FileUploader2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"793b38bc383acbc34191cb5f583537af97a8a4bc", @"/Views/Signal/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"49a29448f06282f862ea411ddfb28b2f520f8bde", @"/Views/_ViewImports.cshtml")]
    public class Views_Signal_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("message-form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\n<script");
            BeginWriteAttribute("src", " src=\"", 641, "\"", 722, 3);
            WriteAttributeValue("", 647, "https://unpkg.com/", 647, 18, true);
            WriteLiteral("@");
            WriteAttributeValue("", 667, "aspnet/signalr", 667, 14, true);
            WriteLiteral("@");
            WriteAttributeValue("", 683, "1.0.0-rc1-final/dist/browser/signalr.js", 683, 39, true);
            EndWriteAttribute();
            WriteLiteral("></script>\n<div class=\"row\">\n    <div class=\"col\">\n        <p>Push Message</p>\n        <div class=\"signalr-demo\">\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "793b38bc383acbc34191cb5f583537af97a8a4bc4265", async() => {
                WriteLiteral("\n                <input type=\"text\" class=\"form-control\" id=\"message-box\"/>\n            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            <hr/>\n            <ul id=\"messages\"></ul>\n        </div>\n    </div>\n</div>\n");
            WriteLiteral(@"

<script type=""text/javascript"">


    const messageForm =  document.getElementById('message-form');
    const messageBox = document.getElementById('message-box');
    const messages = document.getElementById('messages');
    
    const connection = new signalR.HubConnectionBuilder()
        .withUrl(""/chat"")
        .configureLogging(signalR.LogLevel.Information)
        .build();
        function parseHTML(html) {
            var t = document.createElement('template');
            t.innerHTML = html;
            return t.content;
        }
    function extracted(messageText){
                        var li= document.createElement('li')
                        var divrow= document.createElement('div')
                        var divcol1= document.createElement('div')
                        var divcol2= document.createElement('div')
                        var button= document.createElement('button')
                        button.onclick=function (){copyToClp(messageText)}
                        button.va");
            WriteLiteral(@"lue=""Copy""
                        button.innerText=""Copy""
                        button.className=""btn btn-primary btn-large""
                        divcol2.className=""col mx-5 my-2"";
                        divcol1.className=""col  mx-5 my-2"";
                        divcol1.innerText=messageText;
                        divrow.className=""row m-2"";
                        divcol2.appendChild(button)
                        divrow.appendChild(divcol1)
                        divrow.appendChild(divcol2)
                        li.appendChild(divrow)
return li;
} connection.on('newMessage', (sender, messageText) => {var li = extracted(messageText);
        


        console.log(`${sender}:${messageText}`);
     
                messages.appendChild(li);
    }); 
    connection.on('newMessage2', (sender, messageText) => {
        console.log(`${sender}:${messageText}`);
        
       var li = extracted(messageText);
               
       
       
               console.log(`${sender}:${messageText}`);
    ");
            WriteLiteral(@"        
                       messages.appendChild(li);
    });
    
    connection.start()
        .then(() => console.log('connected!'))
        .catch(console.error);
        
    messageForm.addEventListener('submit', ev => {
        ev.preventDefault();
        const message = messageBox.value;
        connection.invoke('SendMessage', message);
        messageBox.value = '';
    });
    
    function myFunction(value) {

      navigator.clipboard.writeText(value);
    
      /* Alert the copied text */
      // alert(""Copied the text: "" + value);
    }
    
    
    function copyToClp(txt){
        var m = document;
        txt = m.createTextNode(txt);
        var w = window;
        var b = m.body;
        b.appendChild(txt);
        if (b.createTextRange) {
            var d = b.createTextRange();
            d.moveToElementText(txt);
            d.select();
            m.execCommand('copy');
        }
        else {
            var d = m.createRange();
            var g = w.getSelection;
           ");
            WriteLiteral(" d.selectNodeContents(txt);\n            g().removeAllRanges();\n            g().addRange(d);\n            m.execCommand(\'copy\');\n            g().removeAllRanges();\n        }\n        txt.remove();\n    }\n\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
